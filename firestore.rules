rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, deny all reads and writes. This is the most secure starting point.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- USER RULES (MERGED) ---
    // This block now supports both friend management and the new submission flow.
    match /users/{userId} {
      // Kept the original rule: Any authenticated user can read profiles (for friend search, etc.).
      allow read: if request.auth != null;

      // Original rule: A user can create their own document.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Kept the original, complex update rule. The first condition (request.auth.uid == userId)
      // is sufficient to allow a user to update their own 'live_submission_id'.
      // All existing friend request logic is preserved.
      allow update: if request.auth != null && (
        request.auth.uid == userId ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friendRequestsReceived']) && request.resource.data.friendRequestsReceived.size() == resource.data.get('friendRequestsReceived', []).size() + 1 && request.auth.uid in request.resource.data.friendRequestsReceived) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasAll(['friends', 'friendRequestsSent']) && request.resource.data.diff(resource.data).affectedKeys().size() == 2 && request.auth.uid in resource.data.friendRequestsSent) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friendRequestsSent']) && request.auth.uid in resource.data.friendRequestsSent && !(request.auth.uid in request.resource.data.friendRequestsSent))
      );
    }

    // --- USERNAMES RULES (PRESERVED) ---
    // This entire block is preserved from the original file.
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null
                    && !exists(/databases/$(database)/documents/usernames/$(username))
                    && request.resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null
                    && resource.data.uid == request.auth.uid;
    }

    // --- CHAT RULES (PRESERVED) ---
    // This entire block for chats and messages is preserved from the original file.
    match /chats/{chatId} {
      allow create: if request.auth.uid in request.resource.data.participants;
      allow read, update: if (!exists(/databases/$(database)/documents/chats/$(chatId))) ||
                           (request.auth.uid in resource.data.participants);

      match /messages/{messageId} {
        allow read: if request.auth.uid in resource.data.participants;
        allow create: if request.auth.uid in request.resource.data.participants;
        allow update: if request.auth.uid in resource.data.participants;
      }
    }

    // --- SUBMISSIONS RULES (NEW) ---
    // This new block is added from the Phase 2 implementation plan.
    match /submissions/{submissionId} {
      allow create: if request.auth.uid == request.resource.data.author_uid;
      allow read, update: if request.auth.uid == resource.data.author_uid
                          && resource.data.status == 'live';
      allow delete: if false;
    }

    // --- PUBLIC THREADS RULES (NEW) ---
    // This new block is added for Phase 3.
    match /public_threads/{threadId} {
        allow read: if true;
        allow write: if false; // Only the backend can write here
    }
  }
}
