# TenorWisp App Development Rules

This document outlines the context, tech stack, and best practices for developing the TenorWisp mobile application.

## 1. Core App Concept

We are creating a novel social discussion platform designed to foster more authentic and profound conversations by prioritizing ideas over identities. The app's core purpose is to move away from the performative and often polarized nature of traditional social media and instead create a space for thoughtful, collective reflection.

At its heart, the app functions through a unique, multi-stage AI-powered process:

1. **Private & Anonymous Submission:** Instead of public posts, users privately and anonymously submit their thoughts on potential discussion topics. This removes social pressure and encourages more honest and nuanced contributions.1  
2. **AI-Powered Analysis:** On the backend, these private submissions are vectorized and run through a clustering algorithm (like HDBSCAN). This process intelligently groups similar ideas and identifies the most prominent themes and questions emerging from the user base.  
3. **AI-Generated Discussion Threads:** The system then takes the top 2-3 most significant clusters and uses a Large Language Model (LLM) to generate a well-crafted, open-ended discussion prompt for each. These AI-generated threads become the main content of the app

## 2. Project Tech Stack Overview

### Frontend: Mobile Application
- **Flutter** - Cross-platform mobile development

### Backend: Core Logic & API
- **Python** - Primary backend language
- **FastAPI** - Web framework and API

### Database & Core Services
- **Firebase Authentication** - User management and identity
- **Cloud Firestore** - NoSQL database with real-time capabilities

### Deployment & Hosting
- **Railway** - Backend hosting and deployment

### AI/ML Libraries
- **`sentence-transformers`** - Text vectorization
- **`hdbscan`** - Clustering algorithm
- **Google Gemini API** - Text generation and summarization

## 3. Project Structure & Key Files

When providing assistance, be aware of these key files and their purpose:

* **`pubspec.yaml`**: The project's manifest file. All new packages must be added here.
* **`lib/main.dart`**: The entry point of the application. It initializes Firebase and contains the `AuthWrapper` widget, which handles routing between the login and home screens based on authentication state.
* **`lib/app_theme.dart`**: Contains the global `ThemeData` for the entire application, including the custom color scheme (Ethereal Blue, Gentle Pink, etc.) and typography.

## 4. General Development Guidelines

* **UI Consistency:** All UI elements should adhere to the theme defined in `lib/app_theme.dart`. Avoid hardcoding colors or styles directly in widgets. Use `Theme.of(context)` to access theme properties.
* **Clean Code:** Follow effective Dart style guidelines. Code should be well-commented, especially for complex logic. Widgets should be broken down into smaller, reusable components where appropriate.
* **Firebase Security:** Security is important. Default to secure Firestore and Storage rules (`allow read, write: if false;`) and then grant access explicitly. Avoid using insecure rules like `allow read, write: if true;`.
* **Error Handling:** Implement robust error handling, especially for Firebase operations. Use `try-catch` blocks for asynchronous calls and display user-friendly feedback using `ScaffoldMessenger` (SnackBars).
* **State Management:** Use `StatefulWidget` for local widget state (like a loading indicator) and `StreamBuilder` for handling the global authentication state, but let me know if you think using a solution like Provider or Riverpod would be more appropriate at any point.
