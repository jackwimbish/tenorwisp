# TenorWisp App Development Rules

This document outlines the context, tech stack, and best practices for developing the TenorWisp mobile application.

## 1. Core App Concept

TenorWisp is a mobile messaging application, built with Flutter and Firebase, where users can share messages, photos, and videos that disappear 24 hours after they have been viewed by the recipient. The core functionality is similar to Snapchat's ephemeral messaging.

## 2. Technology Stack

* **Framework:** Flutter (latest stable version)
* **Language:** Dart
* **Backend Platform:** Firebase
  * **Authentication:** Firebase Authentication (Email/Password to start)
  * **Database:** Cloud Firestore
  * **File Storage:** Cloud Storage for Firebase
  * **Serverless Logic:** Cloud Functions for Firebase (for message deletion)
* **State Management:** Start with `StatefulWidget` and `StreamBuilder` for auth state. Evolve to a more robust solution like Provider or Riverpod if needed.
* **IDE:** Visual Studio Code with the official Flutter and Dart extensions.

## 3. Project Structure & Key Files

When providing assistance, be aware of these key files and their purpose:

* **`pubspec.yaml`**: The project's manifest file. All new packages must be added here.
* **`lib/main.dart`**: The entry point of the application. It initializes Firebase and contains the `AuthWrapper` widget, which handles routing between the login and home screens based on authentication state.
* **`lib/app_theme.dart`**: Contains the global `ThemeData` for the entire application, including the custom color scheme (Ethereal Blue, Gentle Pink, etc.) and typography.
* **`lib/login_screen.dart`**: The UI and logic for user sign-in using email and password.
* **`lib/home_screen.dart`**: The main screen shown after a user logs in. It will eventually display a list of users or active chats.
* **`lib/firebase_options.dart`**: **IMPORTANT:** This file is generated by `flutterfire configure` and is included in the `.gitignore`. It should **never** be committed to the repository.
* **`android/app/google-services.json`**: The Android configuration file for Firebase. This file is also in the `.gitignore`.
* **`firestore.rules` & `storage.rules`**: These files are at the root of the project and contain the security rules for their respective Firebase services. They are deployed via the Firebase CLI.

## 4. General Development Guidelines

* **UI Consistency:** All UI elements should adhere to the theme defined in `lib/app_theme.dart`. Avoid hardcoding colors or styles directly in widgets. Use `Theme.of(context)` to access theme properties.
* **Clean Code:** Follow effective Dart style guidelines. Code should be well-commented, especially for complex logic. Widgets should be broken down into smaller, reusable components where appropriate.
* **Firebase Security:** Security is paramount. Default to secure Firestore and Storage rules (`allow read, write: if false;`) and then grant access explicitly. Never use insecure rules like `allow read, write: if true;`.
* **Error Handling:** Implement robust error handling, especially for Firebase operations. Use `try-catch` blocks for asynchronous calls and display user-friendly feedback using `ScaffoldMessenger` (SnackBars).
* **State Management:** Use `StatefulWidget` for local widget state (like a loading indicator) and `StreamBuilder` for handling the global authentication state, but let me know if you think using a solution like Provider or Riverpod would be more appropriate at any point.
